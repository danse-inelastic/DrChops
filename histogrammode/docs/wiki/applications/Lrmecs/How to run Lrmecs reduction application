This page explains how to run LRMECS reduction application from command line. If you like GUI, please follow this 
[[How to run Lrmecs reduction GUI | instruction]].

More information about [[ARCS_1.0_applications | ARCS applications]]


=== Environment Set-up ===
Before you run LRMECS reduction application, please make sure that environment variables of ARCS software are set correctly. Set up of environment variables depends on the platform on which the reduction application will be run. This step is very critical and needs special attention. Once this step is accomplished, it can be set up automatically for you in your next reduction task. If you have installed ARCS software following our [http://www.cacr.caltech.edu/projects/ARCS/arcs-1.0/web/Download.htm Installation Instructions], there should be a script that can set those env vars for you. Please don't hesitate to ask linjiao@caltech.edu for help if you have any trouble.


=== Preparation of data files ===
Please follow instructions in page [[Prepare Lrmecs Reduction Directory]]



=== Understand the data better ===
To reduce the data, the reduction application needs some information. Some of those information can be easily obtained by looking at some plots.

==== Time independent background ====
An important step in reduction is to remove the "time-independent background" from the data. The "time-idependent" background is used to identify the background noise presented in neutron measurements. In the reduction procedure, such noise is estimated by the averaged counts in a user-specified tof region. Please take a look at the following figure:

[[Image:Lrmecs_4849_I_tof.png|thumb|center|600px|Integrated intensity vs time-of-flight bin number]]

This figure displays a curve of neutron intensity 
(integrated over all detectors and pixels) vs time-of-flight bin numbers. 
Apparently the region in (3000, 3500) contains useful signals. 
In the region of (5000, 5500), there are very few counts. 
We can take that region for our calculation of time independent 
background.
So please write down these two numbers 5000 and 5500, 
and they will be useful soon.


The above plot is created by a tool "LrmecsPlotI_tof.py". For example, if you want to see I(tof) of the data file "4849", then the command line would be 

 $ LrmecsPlotI_tof.py --Measurement.dataFilename=4849


==== Monitor data ====
To obtain neutron incident energy, we need to know the times of flights for neutrons to travel from moderator to two monitors. Here is a plot of I(tof) for one monitor (monitor id=1):

[[Image:Lrmecs_4849_monitor1_I_tof.png|thumb|center|600px|Integrated intensity vs time-of-flight bin number]]

The reduction application will fit this curve to a gaussian, in order to find out the time of flight for neutrons to travel from moderator to monitor whose id is 1. 

To generate such a plot, following are examples:

For the monitor with id 0:
 $ LrmecsPlotMonI_tof.py --Measurement.dataFilename=4849 --monitorId=0

For the monitor with id 1:
 $ LrmecsPlotMonI_tof.py --Measurement.dataFilename=4849 --monitorId=1

From a plot, please guess the parameters of a guassian that fits the curve:
* center
* width
* intensity (integrated)
* background (baseline) 

Please make a good guess of the center and the width of the peak, 
then please also guess the height of the peak. 
Then the following approximation usually works well:

* center = center
* width = width
* intensity = width * height / 2.
* background = 0

For example, for data 4849, monitor 1, a guess could be
 3380.0, 34.0, 100000.0, 0.0

Please write down these numbers and they will be useful soon.


Monitors are also used to normalize counts on detectors. So please write down two tofs that bound the region where the integrated intensity will be used as normalization constant.


=== Preparation of pml file ===
 
The ".pml" file is used as input file for PHAROS reduction applications. 
A tool was created to help you generate an example pml file 
(this tool is only availble in linux and mac platforms, 
and is not available in windows. 
For windows users, [[LrmecsReductionLight | GUI]] interface is the solution.):

 $ text2pyreui.py LrmecsReductionLight.py

You will be presented with a dialog

[[Image:Text2pyreui-LrmecsReductionLight-mainwindow.png]]

This dialog helps users to change settings of the current application, LrmecsReductionLight. Please use up/down arrow keys to move between menu items. Each menu item is either a "property" or a "composite" except the last item "*Done".  When you select a "property" like "EiGuess", a window will shows up to ask you what value you want it to be while the original value is shown as default 

[[Image:Text2pyreui-LrmecsReductionLight-setproperty.png]]

after you change the value and hit enter, you will be brought back to the original screen.

When you select a "composite" (a "composite" is a list of properties and composites) like "dataFiles", a new settings window will shows up for that composite, like this one:

[[Image:Text2pyreui-LrmecsReductionLight-datafiles.png ]]

The last item "*Done" should be selected (hit <Enter> key) when you are done with current screen of settings, like this:

[[Image:Text2pyreui-LrmecsReductionLight-Done.png ]]

Most of those settings are straightforward to change. Some might deserve more explanations here.


==== Incident Energy ====
Move curser to item "incidentEnergy" and press <ENTER>, the following window shows up:

[[Image:Text2pyreui-LrmecsReductionLight-incidentEnergy.png]]


===== EiGuess =====
Select item "EiGuess" and input your guess in the following window:

[[Image:Text2pyreui-LrmecsReductionLight-setproperty.png]]


===== IncidentEnergySolver =====
Select item "IncidentEnergySolver" and the following dialog shows up:

[[Image:Text2pyreui-LrmecsReductionLight-monitorEiSolver.png]]

This incident-energy solver makes use of data from two beam monitors. 
It fits centers of peaks in the I(tof) curve of two monitors and 
calculate time-of-flight for neutron to travel between two monitors.
Given the distance of these two monitors, we can compute the neutron
incident energy.

In this window, we are presented with two menu items:

* monitor2FitGuess
* monitor1FitGuess

As the names suggest, each of them correspond to one monitor,
and you have to make a guess of parameters for a gaussian fit to each peak 
as instructed in 
[[How_to_run_Lrmecs_reduction_application#Monitor Data]]

Choose either monitor by moving curser to a menu item, 
for example, moinitor1FitGuess, and hit <ENTER>, we are presented with

[[Image:Text2pyreui-LrmecsReductionLight-monitor1FitGuess.png]]

Please input your guess there and choose <OK>

Please note in the above dialog there is a hint: "monitor1FitGuess" is for the front monitor. 
Front monitor is closer to moderator, while back monitor is farther away from moderator.


==== TimeBG ====
When you select "TimeBG" in the main dialog, you will be prompted with

[[Image:Text2pyreui-LrmecsReductionLight-tbg.png]]

You should have used LrmecsPlotI_tof.py to plot intensity vs tof and write down two numbers. If not, please consult [[How_to_run_Lrmecs_reduction_application#Time independent background]]. 

Please input those two numbers to answer these two questions


==== Axes ====

When you select "axes" in the main dialog, you will be prompted with this dialog

[[ Image:Text2pyreui-LrmecsReductionLight-axes.png ]]

This dialog is for you to change settings of axes of reduced S(phi, E) and S(Q,E). There axes are necessary:

* phi: scattering angle
* E: energy transfer
* Q: scalar momentum transfer

If select "eAxis", you will be prompted by 

[[ Image:Text2pyreui-LrmecsReductionLight-eAxis.png ]]

In this window, you need to specify the minimum, maximum, and step size of the energy bins.

Similarly, you need to change settings for Q bins and phi bins.


==== Finish up ====
When you select "*Done" in the main dialog, you will be told that the configuration is done:

[[ Image:Text2pyreui-LrmecsReductionLight-configurationisdone.png ]]

Just hit enter, and the next window would be

[[ Image:Text2pyreui-LrmecsReductionLight-save-or-run.png ]]

Here you can choose to

* Save settings to a file. The file will be named LrmecsReductionLight.pml
* Save settings and run the application. 
* Simple quit without doing anything

I would recommend to choose the first option, and then you have a chance to 
change your configuration file by hand. 

If you choose the second option "Save settings and run the application", 
you will be presented with the following window:

[[ Image:Text2pyreui-LrmecsReductionLight-launcher.png ]]

Move curser to choose "*Done" and press <Enter>, 
the reduction application will start running.


 

=== Run ===

If in the previous step you choose either option 1 or 2, there will be a
file named "LrmecsReductionLight.pml" in your working directory.
Running LrmecsReduction is simple now due to existence of LrmecsReduction.pml:
 
 $ LrmecsReduction.py 

=== S(Q,E) ===

If everything is fine, a file named "sqe.pkl" will be created under the current directory, to have a quick look at the reduced S(Q,E), please try

 $ PlotSqe.py
