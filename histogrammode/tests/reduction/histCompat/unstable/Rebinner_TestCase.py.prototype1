#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2005 All Rights Reserved  
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import unittest

from unittestX import TestCase
class Rebinner_TestCase(TestCase):

    def test1D(self):
        "Rebinner: 1D, linear"
        from histogram import axis, datasetFromFunction, histogram, arange
        
        #create axis x
        min = 0.; delta = 1.0; nBinsX = 4
        axisX = axis( 'x', unit = 'meter', centers = arange( 0., 4.0, 1.0 ) )

        #create input histogram
        inHist = histogram(name = 'in', axes = [axisX,])
        inHist[ () ] = [1,1,1,1], [0,0,0,0]
                      
        #create axis y
        min = 0.; delta = 1.0; nBinsY = 2
        axisY = axis( 'y', unit = 'meter', centers = arange(0., 2.0, 1.0) )

        #create output histogram
        outHist = histogram( 'out', (axisY,) )

        #create mapper
        def mapper(X):
            #input is a tuple
            x, = X
            #
            return x/2.,

        #call rebinner
        from reduction.histCompat.Rebinner import rebinner
        rebinner.rebin( inHist, mapper, outHist )

        #check output
        outdataNA = outHist.data().storage().asNumarray()
        self.assertVectorAlmostEqual( outdataNA, [2., 2.] )

        return
    
    def test2DTo1D(self):
        "Rebinner: 2D --> 1D"
        from histogram import createContinuousAxis
        from histogram import createDataset
        from histogram.Histogram import Histogram
        
        #create axis x
        min = 0.; delta = 1.0; nBinsX = 100
        axisX = createContinuousAxis(
            'x', 'meter', centersCreationArgs=(min, delta, nBinsX) )

        #create axis y
        min = 0.; delta = 1.0; nBinsY = 100
        axisY = createContinuousAxis(
            'y', 'meter', centersCreationArgs=(min, delta, nBinsY) )

        #create input histogram
        indata = createDataset('indata', '', (nBinsX,nBinsY) )
        inerrors  = createDataset('inerrors', '', (nBinsX,nBinsY) )
        inHist = Histogram(
            name = 'in', data = indata, errors = inerrors, axes = [axisX,axisY])

        indataNA = indata.storage().asNumarray()
        indataNA[:] = [[1]*100]*100

        #create axis r
        min = 0.; delta = 1.0; nBinsR = 100
        axisR = createContinuousAxis(
            'r', 'meter', centersCreationArgs = (min, delta, nBinsR) )

        #create output histogram
        outdata = createDataset('outdata', '', (nBinsR,) )
        outerrors  = createDataset('outerrors', '', (nBinsR,) )
        outHist = Histogram(
            name = 'out', data = outdata, errors = outerrors, axes = [axisR,])


        #create mapper
        def mapper(X):
            x,y = X
            from math import sqrt
            return sqrt(x*x + y*y),

        #call rebinner
        from reduction.histCompat.Rebinner import rebinner
        rebinner.rebin( inHist, mapper, outHist)

        #check output
        outdataNA = outdata.storage().asNumarray()
        #print outdataNA
        for r, v in enumerate(outdataNA):
            if r<10: continue
            from math import pi
            expected = r * 2*pi/4.
            assert abs(v-expected)/max(expected,v) < 0.2, "%s != %s" % (v, expected)
        return
    
    
    def test2DTo2D(self):
        "Rebinner: 2D --> 2D"
        from histogram import createContinuousAxis
        from histogram import createDataset
        from histogram.Histogram import Histogram
        
        #create axis x
        min = 0.; delta = 1.0; nBinsX = 100
        axisX = createContinuousAxis(
            'x', 'meter', centersCreationArgs = (min, delta, nBinsX) )

        #create axis y
        min = 0.; delta = 1.0; nBinsY = 100
        axisY = createContinuousAxis(
            'y', 'meter', centersCreationArgs = ( min, delta, nBinsY) )

        #create input histogram
        indata = createDataset('indata', '', (nBinsX,nBinsY) )
        inerrors  = createDataset('inerrors', '', (nBinsX,nBinsY) )
        inHist = Histogram(
            name = 'in', data = indata, errors = inerrors, axes = [axisX,axisY])

        indataNA = indata.storage().asNumarray()
        indataNA.shape = nBinsX, nBinsY
        for i in range(nBinsX):
            for j in range(nBinsY):                
                indataNA[i,j] = i-j

        #create axis x1
        min = 0.; delta = 1.0; nBinsX1 = 100
        axisX1 = createContinuousAxis(
            'x1', 'meter', centersCreationArgs = ( min, delta, nBinsX1) )

        #create axis y1
        min = 0.; delta = 1.0; nBinsY1 = 100
        axisY1 = createContinuousAxis(
            'y1', 'meter', centersCreationArgs = (min, delta, nBinsY1) )

        #create output histogram
        outdata = createDataset('outdata', '', (nBinsX1,nBinsY1) )
        outerrors  = createDataset('outerrors', '', (nBinsX1,nBinsY1) )
        outHist = Histogram(
            name = 'out', data = outdata, errors = outerrors, axes = [axisX1,axisY1])

        #create mapper
        def mapper(X):
            x,y = X
            return y,x

        #call rebinner
        from reduction.histCompat.Rebinner import rebinner
        rebinner.rebin( inHist, mapper, outHist)

        #check output
        outdataNA = outdata.storage().asNumarray()
        outdataNA.shape = nBinsX1, nBinsY1
        #print outdataNA
        for x in range(nBinsX1):
            for y in range(nBinsY1):
                self.assertEqual( outdataNA[x,y], y-x )
        return
    
    pass # end of Rebinner_TestCase

    
def pysuite():
    suite1 = unittest.makeSuite(Rebinner_TestCase)
    return unittest.TestSuite( (suite1,) )

def main():
    pytests = pysuite()
    alltests = unittest.TestSuite( (pytests, ) )
    unittest.TextTestRunner(verbosity=2).run(alltests)
    return


if __name__ == '__main__': main()
    

# version
__id__ = "$Id: Rebinner_TestCase.py.prototype1 1268 2007-06-18 15:23:42Z linjiao $"

# End of file 
