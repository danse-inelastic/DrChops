#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                Jiao  Lin
#                      California Institute of Technology
#                        (C) 2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from drchops.components.FormActor import FormActor as base, action

class Actor(base):
    
    """
    Actor is a Pyre component that 'acts' when user requests for dynamic web contents.

    In web-browser: http://localhost:8080/drchops.py?actor=testform1&routine=present_form
    find an actor named 'testform1' and call the routine named 'present_form' as shown 
    below.
    """


    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')
        

    def default(self, director):
        id = self.inventory.id

        # if user does not supply a record to edit, 
        # create a default record if it does not exist.
        if id == '':
            id = 'default'
            clerk = director.clerk
            try: record = clerk.getRecordByID( 'TestObject1', id )
            except:
                from drchops.dom.TestObject1 import TestObject1
                record = TestObject1()
                record.id = id
                clerk.newRecord( record )
            self.inventory.id = id

        # now present the form for the requested record
        return self.present_form(director)
    

    def present_form(self, director, errors = None):
        page = director.retrievePage( 'testform1' )
        main = page._body._content._main
        document = main.document(title='This is a test form. defined in drchops/actors/testform1.odb')
        document.description = (
            "This simple test form presents two text fields. "
            "When you click "
            "OK, it prints out a string that is the join of the texts entered "
            "in those two input text fields."
            )

        id = self.inventory.id

        # load a form component named "testform1"
        # a form component is responsible to establish a form
        formcomponent = self.retrieveFormToShow( 'testform1' )  
        formcomponent.inventory.id = id
        formcomponent.director = director

        # start form
        form = document.form(
            name = 'sampleassembly',
            legend = formcomponent.legend(),
            action = director.cgihome)

        # specify action
        # An action is specify by (actor, routine)
        # additional arguments for the action can be supplied too.
        # label is optional. (especially for form action)
        theaction = action(
            label = '', 
            actor = 'testform1', routine = 'calculate', 
            arguments = { 'id': self.inventory.id,
                          'form-received': formcomponent.name },
            )

        # weave the action into the form
        from drchops.weaver import action_formfields
        action_formfields( theaction, form )
        
        # expand the form using the form component
        formcomponent.expand( form, errors = errors )

        # ok button
        submit = form.control(name="submit", type="submit", value="OK")

        return page


    def calculate(self, director):
        """
        This routine is called when the OK button is hit.
        """
        #prepare the page layout
        page = director.retrievePage( 'testform1' )
        main = page._body._content._main
        document = main.document(title='Hello, here is the result calculated from your inputs')

        # process the input form and return a db record
        # that contains user inputs.
        record = self.processFormInputs( director )

        # outputs
        p = document.paragraph()
        p.text = ['Record %s:' % (record.id, ),]

        # you can do much more complex computations here
        # ...

        # and then output the result
        p = document.paragraph()
        p.text = ["%s, %s" % (record.text1, record.text2) ]
        
        return page


def actor():
    return Actor('testform1')


# version
__id__ = "$Id$"

# End of file 
