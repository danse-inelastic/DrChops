#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                Jiao  Lin
#                      California Institute of Technology
#                        (C) 2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from drchops.components.FormActor import FormActor as base, action, action_link, InputProcessingError

class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')
        id.meta['tip'] = 'id of reduction session'

        type = pyre.inventory.str( 'type', default = 'VanadiumReduction' )
        type.meta['tip'] = 'type of reduction'


    def default(self, director):
        return self.listall( director )


    def listall(self, director):
        page = director.retrievePage( 'reduction' )
        main = page._body._content._main
        document = main.document(title='Reductions')

        reductions = []
        from drchops.dom import reductiontables
        for table in reductiontables():
            reductions += director.db.fetchall( table )
            continue

        from drchops.components.ReductionDescriptionRenderer import describe
        for reduction in reductions:
            p = document.paragraph()
            link = action_link(
                action(actor = 'reduction',
                       routine = 'view',
                       label = reduction.id,
                       id = reduction.id,
                       type = reduction.__class__.__name__,
                       ),
                director.cgihome
                )
            p.text = [
                '%s: %s' % (
                link, describe(reduction, director),
                ),
                ]
            continue
        
        return page


    def start(self,director):
        return self.select_reduction_type( director )


    def select_reduction_type(self, director):
        page = director.retrievePage( 'reduction' )
        main = page._body._content._main
        document = main.document(
            title='Reduction: Start'
            )
        document.description = (
            'Please select the reduction type and click OK'
            )

        formcomponent = self.retrieveFormToShow( 'select_reduction_type' )
        formcomponent.director = director

        # start form
        form = document.form(
            name = 'select_reduction_type',
            legend = formcomponent.legend(),
            action = director.cgihome)

        # specify action
        theaction = action(
            label = '', 
            actor = 'reduction', routine = 'verify_reduction_type_selection', 
            arguments = {'form-received': formcomponent.name },
            )

        # weave the action into the form
        from drchops.weaver import action_formfields
        action_formfields( theaction, form )
        
        # expand the form using the form component
        formcomponent.expand( form )

        # ok button
        submit = form.control(name="submit", type="submit", value="OK")
        
        return page


    def verify_reduction_type_selection(self, director):
        # process the input form and return a db record
        # that contains user inputs.
        reduction = self.processFormInputs( director )
        type = reduction.__class__
        typename = type.__name__
        handler = "configure_%s" % typename.lower()
        handler = getattr(self, handler)
        self.inventory.id = reduction.id
        return handler(director)
        

    def configure_vanadiumreduction(self, director, errors = None):
        #prepare the page layout
        page = director.retrievePage( 'reduction' )
        main = page._body._content._main
        document = main.document(
            title='Reduce a vanadium run to obtain mask and calibration constants')

        # the reduction record
        clerk = director.clerk
        id = self.inventory.id
        reduction = clerk.getVanadiumReduction(id)

        # prepare form
        formcomponent = self.retrieveFormToShow( 'vanadiumreduction' )
        formcomponent.director = director

        # start form
        form = document.form(
            name = 'vanadiumreduction',
            legend = formcomponent.legend(),
            action = director.cgihome)

        # specify action
        theaction = action(
            label = '', 
            actor = 'reduction', routine = 'verify_vanadiumreduction_configuration', 
            arguments = {'form-received': formcomponent.name,
                         'id': self.inventory.id},
            )

        # weave the action into the form
        from drchops.weaver import action_formfields
        action_formfields( theaction, form )
        
        # expand the form using the form component
        formcomponent.expand( form, errors = errors )

        # ok button
        submit = form.control(name="submit", type="submit", value="OK")
        
        return page


    def configure_reductiontomslice(self, director, errors = None):
        #prepare the page layout
        page = director.retrievePage( 'reduction' )
        main = page._body._content._main
        document = main.document(title='Reduce data to mslice data files')

        # the reduction record
        clerk = director.clerk
        id = self.inventory.id
        reduction = clerk.getReductionToMslice(id)

        # prepare form
        formcomponent = self.retrieveFormToShow( 'reductiontomslice' )
        formcomponent.director = director

        # start form
        form = document.form(
            name = 'reductiontomslice',
            legend = formcomponent.legend(),
            action = director.cgihome)

        # specify action
        theaction = action(
            label = '', 
            actor = 'reduction', routine = 'verify_reductiontomslice_configuration', 
            arguments = {'form-received': formcomponent.name,
                         'id': self.inventory.id},
            )

        # weave the action into the form
        from drchops.weaver import action_formfields
        action_formfields( theaction, form )
        
        # expand the form using the form component
        formcomponent.expand( form, errors = errors )

        # ok button
        submit = form.control(name="submit", type="submit", value="OK")
        
        return page


    def verify_vanadiumreduction_configuration(self, director):
        try:
            reduction = self.processFormInputs(director)
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'configure_vanadiumreduction'
            return self.configure_vanadiumreduction( director, errors = errors )

        self.inventory.type = reduction.__class__.__name__
        self.inventory.id = reduction.id
        return self.run( director )


    def verify_reductiontomslice_configuration(self, director):
        try:
            reduction = self.processFormInputs(director)
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'configure_reductiontomslice'
            return self.configure_reductiontomslice( director, errors = errors )

        self.inventory.type = reduction.__class__.__name__
        self.inventory.id = reduction.id
        return self.run( director )


    def run(self, director):
        page = director.retrievePage( 'reduction' )
        id = self.inventory.id
        type = self.inventory.type

        clerk = director.clerk
        reduction = clerk.getRecordByID( type, id )

        # create job
        job = buildJob( reduction, director )
        
        # redirect to job actor
        return self.redirect( director, 'job', 'view', id = job.id )


    def view(self, director):
        page = director.retrievePage( 'reduction' )
        id = self.inventory.id
        type = self.inventory.type

        clerk = director.clerk
        reduction = clerk.getRecordByID( type, id )

        main = page._body._content._main
        document = main.document(
            title='%s #%s' % (type, id)
            )
        document.description = (
            'Reduction details'
            )

        props = reduction.getColumnNames()
        lines = ['%s=%s' % (prop, getattr(reduction, prop) ) for prop in props]
        for line in lines:
            p = document.paragraph()
            p.text = [line]
            continue

        p = document.paragraph()
        job = reduction.job
        if job:
            link = action_link(
                action(actor = 'job',
                       routine = 'view',
                       label = 'here',
                       id = job.id,
                       type = job.table.__name__,
                       ),
                director.cgihome
                )
            p.text = ["To see the job submitted for this reduction, please click %s" % link]
        else:
            p.text = ["No job has been created for this reduction"]
            

        return page
        

    def start1(self, director, errors = None):
        page = director.retrievePage( 'reduction' )
        main = page._body._content._main
        document = main.document(
            title='Reduction: Start'
            )

        id = self.inventory.id
        if empty_id( id ):
            reduction = director.clerk.newReduction()
        else:
            reduction = director.clerk.getReduction( id )

        measurement_id = reduction.measurement.id
            
        formcomponent = self.retrieveFormToShow( 'measurement' )
        formcomponent.inventory.id = measurement_id
        formcomponent.director = director

        # start form
        form = document.form(
            name = 'measurement',
            legend = formcomponent.legend(),
            action = director.cgihome)

        # specify action
        theaction = action(
            label = '', 
            actor = 'reduction', routine = 'verify_measurement', 
            arguments = { 'id': reduction.id,
                          'form-received': formcomponent.name },
            )

        # weave the action into the form
        from drchops.weaver import action_formfields
        action_formfields( theaction, form )
        
        # expand the form using the form component
        formcomponent.expand( form, errors = errors )

        # ok button
        submit = form.control(name="submit", type="submit", value="OK")
        
        return page


def buildJob(reduction, director):
    from drchops.components.ReductionJobBuilder import ReductionJobBuilder
    return ReductionJobBuilder(director)(reduction)



import os
from drchops.components.misc import empty_id


def actor():
    return Actor('reduction')


# version
__id__ = "$Id$"

# End of file 
